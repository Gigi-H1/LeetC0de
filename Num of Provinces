void dfs(int** isConnected, int n, int city, bool* visited) {
    visited[city] = true; // Mark the current city as visited

    // Traverse all cities connected to the current city
    for (int i = 0; i < n; i++) {
        if (isConnected[city][i] && !visited[i]) {
            dfs(isConnected, n, i, visited);
        }
    }
}



int findCircleNum(int** isConnected, int isConnectedSize, int* isConnectedColSize) {
    int n = isConnectedSize;
    int provinces = 0;
    bool visited[n];

    for (int i = 0; i < n; i++) {
        visited[i] = false;
    }

    // Iterate through each city
    for (int i = 0; i < n; i++) {
        // If the city has not been visited yet, start a new province
        if (!visited[i]) {
            dfs(isConnected, n, i, visited);
            provinces++; // Increment province count
        }
    }

    return provinces;
}
    
